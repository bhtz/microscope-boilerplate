@page "/todolist"
@using Microscope.Boilerplate.Clients.Web.Blazor.Pages.TodoLists.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<TodoListPage> Loc
@attribute [Authorize]

<PageTitle>@Loc["Title"]</PageTitle>

<MudToolBar>
    <MudText Typo="Typo.h6">@Loc["Title"]</MudText>
    <MudSpacer/>
    <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="OpenTodoListDialog"/>
</MudToolBar>

<UseGetTodolists Context="result">
    <ChildContent>
        <MudDataGrid T="IGetTodolists_Todolists" Items="result.Todolists" Dense="true" Striped="true" Hover="true" Bordered="true" Filterable="true" QuickFilter="@FilterFunc" Hideable="true" ShowMenuIcon="true">
            <ToolBarContent>
                <MudTextField @bind-Value="SearchTerm" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mr-5"></MudTextField>
            </ToolBarContent>
            <Columns>
                <TemplateColumn T="IGetTodolists_Todolists" Title="Name" Filterable="true" Sortable="true">
                    <CellTemplate>
                        <MudText @onclick="() => GoToDetails(context.Item.Id)" Class="cursor-pointer"><b>@context.Item.Name</b></MudText>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn T="IGetTodolists_Todolists" Title="Actions" Filterable="false" Sortable="false">
                    <CellTemplate>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" Color="Color.Default" OnClick="() => GoToDetails(context.Item.Id)"/>
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteTodoList(context.Item.Id)"/>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </ChildContent>
    <ErrorContent>
        @result.First().Message
    </ErrorContent>
    <LoadingContent>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="50px" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="50px" Class="mt-4" />
    </LoadingContent>
</UseGetTodolists>

@code
{
    public string SearchTerm { get; set; } = String.Empty;
    
    private void GoToDetails(Guid itemId)
    {
        _navigationManager.NavigateTo($"/TodoList/{itemId}");
    }

    private async void OpenTodoListDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, DisableBackdropClick = true };
        var parameters = new DialogParameters() { };

        var dialog = _dialogService.Show<TodoListDialog>(null, parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var id = (Guid)result.Data;
            _navigationManager.NavigateTo($"/TodoList/{id}");
        }
    }

    private async void DeleteTodoList(Guid todoListId)
    {
        bool? result = await _dialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result is not null)
        {
            var res = await _todoAppClient.DeleteTodoList.ExecuteAsync(todoListId);

            if (res.IsSuccessResult() && res.Data.DeleteTodoList)
            {
                _snackBar.Add("Saved", Severity.Success);
                StateHasChanged();
            }
            else
            {
                _snackBar.Add(res.Errors.FirstOrDefault().ToString(), Severity.Error);
            }
        }
    }
    
    private Func<IGetTodolists_Todolists, bool> FilterFunc => x =>
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
            return true;
        
        if (x.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
