@page "/todolist/{Id:guid}"
@using Microscope.Boilerplate.Clients.Web.Blazor.Pages.TodoLists.Components
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<TodoListDetailsPage> Loc

<UseGetTodoListById Id="Id" Context="result">
    <ChildContent>
        @{
            Data = result.TodolistById;
        }
        <MudToolBar>
            <MudText Typo="Typo.h6">
                <span @onclick="() => GoToList()" class="mud-primary-text cursor-pointer">@Loc["Todolists"] / </span>
                @if (result.TodolistById.IsCompleted)
                {
                    <strike>@result.TodolistById.Name</strike>
                }
                else
                {
                    @result.TodolistById.Name
                }
            </MudText>
            <MudSpacer/>
            <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="OpenTodoListDialog"/>
        </MudToolBar>
        
        <div>
            <MudIconButton OnClick="OpenTagDialog" Size="Size.Small" Icon="@Icons.Material.Filled.Add"></MudIconButton>
            @foreach (var tag in result.TodolistById.Tags.OrderBy(x => x.Label))
            {
                Color.TryParse(tag.Color, out Color color);
                <MudChip Size="Size.Small" Color="@color" OnClose="() => RemoveTag(tag)">@tag.Label</MudChip>    
            }
        </div>
        
        <MudPaper Elevation="3">
            <div class="mt-4"></div>
            <EditForm Model="@ViewModel" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>
                <MudTextField Variant="Variant.Outlined" T="string" Label="@Loc["AddItem"]" @bind-Value="ViewModel.Label" For="@(() => ViewModel.Label)"/>
            </EditForm>

            <MudList Clickable="true">
                @foreach (var item in result.TodolistById.TodoItems.OrderBy(x => x.Label))
                {
                    <MudListItem OnClick="() => ToggleTodoItem(item.Id)">
                        <MudText>
                            <MudIconButton Size="Size.Small" OnClick="() => DeleteTodoItem(item.Id)" Icon="@Icons.Material.Outlined.Delete" Color="Color.Default"></MudIconButton>
                            @if (item.IsCompleted)
                            {
                                <strike>@item.Label</strike>
                            }
                            else
                            {
                                @item.Label
                            }

                        </MudText>
                    </MudListItem>
                    <MudDivider/>
                }
            </MudList>
        </MudPaper>
    </ChildContent>
    <ErrorContent>
        @result.First().Message
    </ErrorContent>
    <LoadingContent>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="250px" Height="50px" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="50px" Class="mt-4" />
    </LoadingContent>
</UseGetTodoListById>

@code {
    [Parameter] public Guid Id { get; set; }
    private bool Loading { get; set; } = false;
    private IGetTodoListById_TodolistById Data { get; set; }
    public TodoItemViewModel ViewModel { get; set; } = new TodoItemViewModel();

    public async Task OnValidSubmit()
    {
        Loading = true;

        var res = await _todoAppClient.AddTodoItem.ExecuteAsync(ViewModel.Label, Id);
        
        if (res.IsSuccessResult())
        {
            var id = res.Data.AddTodoItem;
            _snackBar.Add("Saved", Severity.Success);
            ViewModel.Label = string.Empty;
        }
        else
        {
            _snackBar.Add(res.Errors.FirstOrDefault()?.Message, Severity.Error);
        }
        
        Loading = false;
    }
    
    public async Task DeleteTodoItem(Guid todoItemId)
    {
        Loading = true;

        var res = await _todoAppClient.DeleteTodoItem.ExecuteAsync(todoItemId, Id);
        
        if (res.IsSuccessResult() && res.Data.DeleteTodoItem)
        {
            _snackBar.Add("Saved", Severity.Success);
            ViewModel.Label = string.Empty;
        }
        else
        {
            _snackBar.Add(res.Errors.FirstOrDefault()?.Message, Severity.Error);
        }
        
        Loading = false;
    }
    
    public async Task ToggleTodoItem(Guid todoItemId)
    {
        Loading = true;

        var res = await _todoAppClient.ToggleTodoItem.ExecuteAsync(todoItemId, Id);
    
        if (res.IsSuccessResult() && res.Data.ToggleTodoItem)
        {
            _snackBar.Add("Saved", Severity.Success);
            ViewModel.Label = string.Empty;
        }
        else
        {
            _snackBar.Add(res.Errors.FirstOrDefault()?.Message, Severity.Error);
        }
        
        Loading = false;
    }
    
    private async void OpenTodoListDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, DisableBackdropClick = true };
        var parameters = new DialogParameters(){};
        
        var vm = new TodoListDialog.TodoListViewModel
        {
            Name = Data.Name
        };

        parameters.Add("ViewModel", vm);
        parameters.Add("Id", Id);

        var dialog = _dialogService.Show<TodoListDialog>(null, parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var id = (bool)result.Data;
            StateHasChanged();
        }
    }

    private async void OpenTagDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, DisableBackdropClick = true };
        var parameters = new DialogParameters(){};
        parameters.Add("TodoListId", Id);

        var dialog = _dialogService.Show<TagDialog>(null, parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var id = (bool)result.Data;
            StateHasChanged();
        }
    }

    public async void RemoveTag(IGetTodoListById_TodolistById_Tags tag)
    {
        var result = await _todoAppClient.RemoveTag.ExecuteAsync(Id, tag.Label, tag.Color);
        if (result.IsSuccessResult())
        {
            _snackBar.Add("Saved", Severity.Success);
            StateHasChanged();
        }
    }

    public async void GoToList()
    {
        _navigationManager.NavigateTo("TodoList");
    }
    
    public class TodoItemViewModel
    {
        [Required]
        public string Label { get; set; }
    }
}
