@page "/todolist/{Id:guid}"
@using Microscope.Boilerplate.Clients.Web.Blazor.Pages.TodoLists.Components
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<TodoListDetailsPage> Loc

<UseGetTodoListById Id="Id" Context="result">
    <ChildContent>
        @{
            Data = result.TodolistById;
        }
        <MudToolBar>
            <MudText Typo="Typo.h6">
                <a href="/todolist">@Loc["Todolists"]</a> / 
                @if (result.TodolistById.IsCompleted)
                {
                    <strike>@result.TodolistById.Name</strike>
                }
                else
                {
                    @result.TodolistById.Name
                }
            </MudText>
            <MudSpacer/>
            <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="OpenTodoListDialog"/>
        </MudToolBar>

        <EditForm Model="@ViewModel" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudTextField Variant="Variant.Filled" T="string" Label="Add item" @bind-Value="ViewModel.Label" For="@(() => ViewModel.Label)"/>
        </EditForm>

        <MudList Clickable="true">
            @foreach (var item in result.TodolistById.TodoItems.OrderBy(x => x.Label))
            {
                <MudListItem OnClick="() => ToggleTodoItem(item.Id)" IconColor="Color.Error">
                    <MudText>
                        <MudIconButton Size="Size.Small" OnClick="() => DeleteTodoItem(item.Id)" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"></MudIconButton>
                        @if (item.IsCompleted)
                        {
                            <strike>@item.Label</strike>
                        }
                        else
                        {
                            @item.Label
                        }

                    </MudText>
                </MudListItem>
                <MudDivider/>
            }
        </MudList>
    </ChildContent>
    <ErrorContent>
        @result.First().Message
    </ErrorContent>
    <LoadingContent>
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="250px" Height="50px" />
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="50px" Class="mt-4" />
    </LoadingContent>
</UseGetTodoListById>

@code {
    [Parameter] public Guid Id { get; set; }
    private bool Loading { get; set; } = false;
    private IGetTodoListById_TodolistById Data { get; set; }
    public TodoItemViewModel ViewModel { get; set; } = new TodoItemViewModel();

    public async Task OnValidSubmit()
    {
        Loading = true;

        var res = await _todoAppClient.AddTodoItem.ExecuteAsync(ViewModel.Label, Id);
        
        if (res.IsSuccessResult())
        {
            var id = res.Data.AddTodoItem;
            _snackBar.Add("Saved", Severity.Success);
            ViewModel.Label = string.Empty;
        }
        else
        {
            _snackBar.Add(res.Errors.FirstOrDefault().ToString(), Severity.Error);
        }
        
        Loading = false;
    }
    
    public async Task DeleteTodoItem(Guid todoItemId)
    {
        Loading = true;

        var res = await _todoAppClient.DeleteTodoItem.ExecuteAsync(todoItemId, Id);
        
        if (res.IsSuccessResult() && res.Data.DeleteTodoItem)
        {
            _snackBar.Add("Saved", Severity.Success);
            ViewModel.Label = string.Empty;
        }
        else
        {
            _snackBar.Add(res.Errors.FirstOrDefault().ToString(), Severity.Error);
        }
        
        Loading = false;
    }
    
    public async Task ToggleTodoItem(Guid todoItemId)
    {
        Loading = true;

        var res = await _todoAppClient.ToggleTodoItem.ExecuteAsync(todoItemId, Id);
    
        if (res.IsSuccessResult() && res.Data.ToggleTodoItem)
        {
            _snackBar.Add("Saved", Severity.Success);
            ViewModel.Label = string.Empty;
        }
        else
        {
            _snackBar.Add(res.Errors.FirstOrDefault().ToString(), Severity.Error);
        }
        
        Loading = false;
    }
    
    private async void OpenTodoListDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, DisableBackdropClick = true };
        var parameters = new DialogParameters(){};
        
        var vm = new TodoListDialog.TodoListViewModel
        {
            Name = Data.Name
        };

        parameters.Add("ViewModel", vm);
        parameters.Add("Id", Id);

        var dialog = _dialogService.Show<TodoListDialog>(null, parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var id = (bool)result.Data;
            StateHasChanged();
        }
    }
    
    public class TodoItemViewModel
    {
        [Required]
        public string Label { get; set; }
    }

}