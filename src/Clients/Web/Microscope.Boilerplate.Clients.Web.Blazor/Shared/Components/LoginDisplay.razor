@namespace Microscope.Boilerplate.Clients.Web.Blazor.Shared.Components
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Localization

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration
@inject IJSRuntime JsRuntime
@inject IStringLocalizer<LoginDisplay> Loc

<AuthorizeView>
    <Authorized>
        <MudMenu Direction="Direction.Left" OffsetX="true" Dense="true" Class="mt-1 ml-4">
            <ActivatorContent>
                <UserAvatar Size="Size.Small" Elevation="0" Color="Color.Primary" Email="@context.User.Claims.FirstOrDefault(x => x.Type == "email")?.Value"></UserAvatar>
            </ActivatorContent>
            <ChildContent>
                <PersonCard Name="@context.User.Identity.Name" Role="@context.User.Claims.FirstOrDefault(x => x.Type == "roles")?.Value" Class="mt-n2" />
                <MudDivider Class="mb-2" />
                <MudListItem Text="@Loc["Account"]" Icon="@Icons.Material.Filled.ManageAccounts" @onclick="OpenAccount" />
                <MudListItem Text="@Loc["Logout"]" Icon="@Icons.Material.Outlined.Login" @onclick="BeginSignOut" />
            </ChildContent>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
        <MudIconButton Class="login-button" Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" OnClick="BeginSignIn" />
    </NotAuthorized>
</AuthorizeView>

@code{
    private string? AccountUrl { get; set; }

    protected override Task OnInitializedAsync()
    {
        AccountUrl = Configuration["OIDC:master:Authority"] + "account";
        return Task.CompletedTask;
    }

    private void BeginSignOut(MouseEventArgs args)
    {
        // await SignOutManager.SetSignOutState();
        Navigation.NavigateToLogout("authentication/logout");
    }

    private void BeginSignIn(MouseEventArgs args)
    {
        Navigation.NavigateToLogin("authentication/login");
    }

    private async void OpenAccount()
    {
        await JsRuntime.InvokeVoidAsync("open", AccountUrl, "_blank");
    }
}