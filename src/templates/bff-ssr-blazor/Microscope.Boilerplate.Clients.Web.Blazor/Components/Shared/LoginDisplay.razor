@using Microsoft.Extensions.Configuration
@using System.Security.Claims
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<LoginDisplay> Loc
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject IJSRuntime JsRuntime

<AuthorizeView>
    <Authorized>
        <MudMenu Direction="Direction.Left" OffsetX="true" Dense="true">
            <ActivatorContent>
                <UserAvatar Size="Size.Medium" Elevation="0" Color="Color.Primary" Email="@context.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)?.Value"></UserAvatar>
            </ActivatorContent>
            <ChildContent>
                <PersonCard Name="@context.User.Identity?.Name" Role="@context.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value" Class="mt-n2" />
                <MudDivider Class="mb-2" />
                <MudListItem Text="@Loc["Account"]" Icon="@Icons.Material.Filled.ManageAccounts" @onclick="OpenAccount" />
                <MudListItem Text="@Loc["Logout"]" Icon="@Icons.Material.Outlined.Logout" @onclick="BeginSignOut" />
            </ChildContent>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
        <MudIconButton Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" OnClick="BeginSignIn"/>
    </NotAuthorized>
</AuthorizeView>

@code{
    
    private string? AccountUrl { get; set; }

    protected override void OnInitialized()
    {
        AccountUrl = Configuration.GetValue<string>("AccountUrl");
    }

    private void BeginSignOut(MouseEventArgs args)
    {
        NavigationManager.NavigateTo($"auth/logout", forceLoad: true);
    }

    private void BeginSignIn(MouseEventArgs args)
    {
        NavigationManager.NavigateTo($"auth/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}", forceLoad: true);
    }

    private async void OpenAccount()
    {
        await JsRuntime.InvokeVoidAsync("open", AccountUrl, "_blank");
    }
}
