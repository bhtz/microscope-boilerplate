@using System.Security.Claims
@using Microsoft.Extensions.Configuration
@using Microsoft.AspNetCore.Components.Authorization
@* @using Microsoft.Extensions.Localization *@
@* @inject IStringLocalizer<LoginDisplay> Loc *@
@inject IConfiguration Configuration
@inject IJSRuntime JsRuntime

<AuthorizeView>
    <Authorized>
        @{
            var initials = GetShortcut(context.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)?.Value);
        }
        <FluentProfileMenu Class="ml-4" Initials="@initials" ImageSize="24">
            <HeaderTemplate>
                <FluentStack Orientation="Orientation.Horizontal">
                    <FluentPersona ImageSize="24" Initials="@initials"></FluentPersona>
                    <FluentStack Orientation="Orientation.Vertical">
                        <FluentLabel Typo="@Typography.Body">@context.User.Identity?.Name</FluentLabel>
                        <FluentLabel Typo="@Typography.Body">@context.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value</FluentLabel>
                    </FluentStack>
                </FluentStack>
            </HeaderTemplate>
            <ChildContent>
                <div style="width: 200px; height: 80px">
                    <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch">
                        <FluentDivider Style="width: 100%;" Role="DividerRole.Separator"></FluentDivider>
                        <FluentButton Appearance="Appearance.Accent" Style="width: 100%;" OnClick="OpenAccount">Account</FluentButton>
                        <FluentButton Appearance="Appearance.Neutral" Style="width: 100%;" OnClick="BeginSignOut">Sign out</FluentButton>
                    </FluentStack>
                </div>
            </ChildContent>
            <FooterTemplate></FooterTemplate>
        </FluentProfileMenu>
    </Authorized>
    <NotAuthorized>
        <FluentPersona 
            Class="ml-4"
            OnClick="BeginSignIn"
            Image="@(new Icons.Regular.Size24.Person().ToDataUri(color: "white"))">
        </FluentPersona>
    </NotAuthorized>
</AuthorizeView>

@code{
    
    private string? AccountUrl { get; set; }

    protected override void OnInitialized()
    {
        AccountUrl = Configuration.GetValue<string>("AccountUrl");
    }

    private void BeginSignOut(MouseEventArgs args)
    {
        NavigationManager.NavigateTo($"auth/logout", forceLoad: true);
    }

    private void BeginSignIn(MouseEventArgs args)
    {
        NavigationManager.NavigateTo($"auth/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}", forceLoad: true);
    }

    private async void OpenAccount()
    {
        await JsRuntime.InvokeVoidAsync("open", AccountUrl, "_blank");
    }
    
    private string GetShortcut(string? email)
    {
        string shortcut = "";

        if (!string.IsNullOrEmpty(email))
        {
            string[] parts = email.Split('@');
            string username = parts[0];

            if (username.Contains("."))
            {
                string[] usernameParts = username.Split('.');
                if (usernameParts.Length >= 2)
                {
                    shortcut = $"{usernameParts[0].Substring(0, 1)}{usernameParts[1].Substring(0, 1)}";
                }
                else if (usernameParts.Length == 1)
                {
                    shortcut = $"{usernameParts[0].Substring(0, 2)}";
                }
            }
            else
            {
                if (username.Length >= 2)
                {
                    shortcut = username.Substring(0, 2);
                }
                else
                {
                    shortcut = username;
                }
            }
        }

        return shortcut.ToUpper();
    }
}
