import{_ as e,o as t,c as o,X as i}from"./chunks/framework.4ab75e15.js";const f=JSON.parse('{"title":"Well Architecture Framework","description":"","frontmatter":{},"headers":[],"relativePath":"Guidelines/waf.md","filePath":"Guidelines/waf.md"}'),r={name:"Guidelines/waf.md"},l=i('<h1 id="well-architecture-framework" tabindex="-1">Well Architecture Framework <a class="header-anchor" href="#well-architecture-framework" aria-label="Permalink to &quot;Well Architecture Framework&quot;">​</a></h1><h2 id="_5-pillars-of-well-architected-framework" tabindex="-1">5 pillars of Well Architected Framework <a class="header-anchor" href="#_5-pillars-of-well-architected-framework" aria-label="Permalink to &quot;5 pillars of Well Architected Framework&quot;">​</a></h2><ul><li>Not something to balance, or trade-offs, they&#39;re a synergy <ul><li>Help you track your performance and evolve your architecture.</li></ul></li><li>5 pillars summary: <ol><li><strong>Operational Excellence</strong><ul><li><strong>Description</strong>: Run and monitor systems &amp; continually improve supporting processes and procedures</li><li><strong>Design principles</strong><ul><li><strong>Perform operations as code</strong>: Infrastructure as Code</li><li><strong>Annotate documentation</strong>: e.g. auto-document after every build)*</li><li><strong>Make frequent, small, reversible changes</strong></li><li><strong>Refine operations procedures frequently</strong>: Ensure team members are familiar with it.</li><li><strong>Anticipate failure</strong>: Learn from all operational failures</li></ul></li><li><strong>Example AWS Services</strong><ul><li><strong>Selection</strong>: Auto Scaling, Lambda, EBS, S3, RDS</li><li><strong>Review</strong>: AWS CloudFormation, <a href="https://aws.amazon.com/blogs/aws/" target="_blank" rel="noreferrer">AWS News Blog</a></li><li><strong>Monitoring</strong>: CloudWatch, Lambda</li><li><strong>Tradeoffs</strong>: Amazon RDS (vs Aurora), ElastiCache (read performance but stale), Snowball (a lot of data but takes a week), CloudFront (cache but stale)</li></ul></li></ul></li><li><strong>Security</strong><ul><li><strong>Description</strong>: Protect information, systems, and assets through risk assessments and mitigation strategies</li><li><strong>Design principles</strong><ul><li><strong>Implement a strong identity foundation</strong>: Least privilege, IAM, centralize privilege management, eliminate reliance on long-term credentials</li><li><strong>Enable traceability</strong>: Automatically respond to logs and metrics.</li><li><strong>Apply security at all layers</strong>: Every instance, OS, and app, e.g. VPC, subnet, LB.</li><li><strong>Automate security best practices</strong>: Encryption, tokenization, and access control.</li><li><strong>Protect data in transit and at rest</strong></li><li><strong>Keep people away from data</strong>: Reduce the need for direct access or manual data processing</li><li><strong>Prepare for security</strong>: Run incident response simulations and use tools with automation to increase your speed for detection, investigation, and recovery</li></ul></li><li><strong>Example AWS Services</strong></li><li><strong>Identity and access management</strong>: IAM, AWS-STS, MFA token, AWS Organizations</li><li><strong>Detective controls</strong>: AWS Config, AWS CloudTrail, Amazon CLoudWatch</li><li><strong>Infrastructure Protection</strong><ul><li><strong>Amazon CloudFront</strong>: Defense against DDoS attack</li><li>Amazon VPC</li><li><strong>AWS Shield</strong>: DDoS protection of AWS account</li><li><strong>AWS WAF</strong>: Web Application Firewall</li><li><strong>Amazon Inspector</strong>: for security of EC2 instance</li></ul></li><li><strong>Data protection</strong>: KMS, S3 (SSE, SSE-KMS, SSE-C, bucket policies etc.) <ul><li>And other managed services such as Elastic Load Balancing (e.g. only HTTPS), Amazon EBS &amp; RDS (SSL Capability)</li></ul></li><li><strong>Incident Response</strong><ul><li><strong>IAM</strong>: Delete account or give it zero privilege</li><li><strong>CloudFormation</strong>: If someone deletes entire structure, how to get back?</li><li>Amazon CloudWatch Events</li></ul></li></ul></li><li><strong>Reliability</strong><ul><li><strong>Description</strong>: <ul><li>Ability of a system to recover from infrastructure or service disruptions</li><li>Dynamically acquire computing resources to meet demand</li><li>Mitigate disruptions such as misconfigurations or transient network issues.</li></ul></li><li><strong>Design principles</strong><ul><li><strong>Test recovery producers</strong>: Use automation to simulate different failures or to recreate scenarios that led to failures before</li><li><strong>Automatically recover from failure</strong>: Anticipate and remediate failures before they occur.</li><li><strong>Scale horizontally to increase aggregate system availability</strong>: Distribute requests across multiple, smaller resources to ensure that they don&#39;t share a common point of failure</li><li><strong>Stop guessing capacity</strong>: Maintain the optimal level to satisfy demand without over or under provisioning, use auto-scaling.</li><li><strong>Manage change in automation</strong>: Use automation to make changes to infrastructure</li></ul></li><li><strong>Example AWS Services</strong><ul><li><strong>Foundations</strong><ul><li><strong>IAM</strong>: No one has too many rights to damage</li><li>Amazon VPC</li><li><strong>Service limits</strong>: monitor limits so you don&#39;t get disruption.</li><li><strong>AWS Trusted Advisor</strong>: e.g. look at service limits</li></ul></li><li><strong>Change Management</strong>: AWS Auto Scaling, Amazon CloudWatch, AWS CloudTrail, AWS Config</li><li><strong>Failure Management</strong>: Backups, AWS CloudFormation (recreate whole infrastructure at once), Amazon S3, Amazon S3 Glacier, Amazon Route 53 (e.g. if application fails you redirect to another application)</li></ul></li></ul></li><li><strong>Performance</strong><ul><li><strong>Description</strong>: Adopt &amp; provide best performance</li><li><strong>Design principles</strong><ul><li>Democratize advanced technologies <em>(track new services)</em></li><li>Go global in minutes <em>(easy multi-region deployment)</em></li><li>Use serverless architectures <em>(avoid burden of managing servers)</em></li><li>Experiment more often <em>(easy to carry out comparative testing)</em></li><li>Mechanical sympathy <em>(be aware of all AWS services)</em></li></ul></li><li><strong>Example AWS Services</strong><ul><li><strong>Prepare</strong>: AWS CloudFormation, AWS Config</li><li><strong>Operate</strong>: AWS CloudFormation, AWS Config, AWS CloudTrail, Amazon CloudWatch, AWS X-Ray</li><li><strong>Evolve</strong>: AWS CloudFormation, CI/CD: CodeBuild, CodeCommit, CodeDeploy, CodePipeline</li></ul></li></ul></li><li><strong>Cost Optimization</strong><ul><li><strong>Description</strong>: Can run systems to deliver business value at the lowest price point.</li><li><strong>Design Principles</strong><ul><li><strong>Adopt a consumption mode</strong>: Pay only for what you use</li><li><strong>Measure overall efficiency</strong>: Use CloudWatch</li><li><strong>Analyze and attribute expenditure</strong>: Use tags, Accurate identification of system usage and costs -&gt; helps measure return on investment (ROI)</li><li><strong>Use managed and application level services to reduce cost of ownership</strong>: As managed services operate at cloud scale, they can offer a lower cost per transaction or service</li></ul></li><li><strong>Example AWS Services</strong><ul><li><strong>Expenditure awareness</strong>: AWS Budgets, AWS Cost and Usage Report, AWS Cost Explorer, Reserved Instance Reporting</li><li><strong>Cost-effective resources</strong>: Spot instance, Reserved instance, Amazon S3 Glacier</li><li><strong>Matching supply and demand</strong>: AWS Auto Scaling, AWS Lambda</li><li><strong>Optimizing over time</strong>: AWS Trusted Advisor, AWS Cost and Usage Report, <a href="https://aws.amazon.com/blogs/aws/" target="_blank" rel="noreferrer">AWS News Blog</a></li></ul></li></ul></li></ol></li></ul><h2 id="well-architected-tool" tabindex="-1">Well Architected Tool <a class="header-anchor" href="#well-architected-tool" aria-label="Permalink to &quot;Well Architected Tool&quot;">​</a></h2><ul><li><a href="https://console.aws.amazon.com/wellarchitected" target="_blank" rel="noreferrer">Tool</a></li><li>Flow: <ol><li>Define a workload</li><li>Do a review <ul><li>Answer questions for each pillar.</li><li>E.g. for operational excellence <ul><li>Question: How do you determine what your priorities are?</li><li>Answers: customer needs / compliance requirements / ... / none</li></ul></li></ul></li><li>Optionally generate reports, milestones, improvement plans (with risks, e.g. &quot;understand business needs&quot;).</li></ol></li></ul>',5),n=[l];function s(a,c,g,u,m,d){return t(),o("div",null,n)}const h=e(r,[["render",s]]);export{f as __pageData,h as default};
